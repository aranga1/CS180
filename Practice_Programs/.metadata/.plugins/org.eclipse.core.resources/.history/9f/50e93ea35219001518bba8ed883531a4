/**
 * CS180 lab 04
 * This class is the main FAFSA class and contains all the methods used to come up with a financial aid number
 * @author Aakash Ranga, aranga@purdue.edu, lab 01
 *
 */
public class FAFSA {
	private boolean hasSSN;
	private boolean isSSregistered;
	private boolean isAcceptedStudent;
	private boolean hasValidResidency;
	private boolean isDependent;
	private int age;
	private int creditHours;
	private double studentIncome;
	private double parentIncome;
	private String classStanding;

	public FAFSA(boolean isAcceptedStudent, boolean isSSregistered, boolean hasSSN,
			boolean hasValidResidency, boolean isDependent, int age,
			int creditHours, double studentIncome, double parentIncome,
			String classStanding) {
		this.isAcceptedStudent = isAcceptedStudent;
		this.isSSregistered = isSSregistered;
		this.hasSSN = hasSSN;
		this.hasValidResidency = hasValidResidency;
		this.isDependent = isDependent;
		this.age = age;
		this.creditHours = creditHours;
		this.studentIncome = studentIncome;
		this.parentIncome = parentIncome;
		this.classStanding = classStanding;

		// initialize all of the instance variables here using 'this' to refer to the instance variable
		// the first one has been done for you
	}
	/**
	 * Determines if the student is eligible for federal financial aid. To be 
	 * eligible, the student must be an accepted student to a higher education
	 * program (isAcceptedStudent), must be registered with the selective service
	 * (isSSregistered) if they are between  the ages of 18-25 inclusive, must
	 * have a social security number (hasSSN), and must have valid residency
	 * status (hasValidResidency).
	 * 
	 * @return true if the student is aid eligible and false otherwise
	 */
	public boolean isFederalAidEligible() {
		if ((age >= 18) && (age <= 25)) {
			if ((isAcceptedStudent == true) && (isSSregistered == true) && (hasSSN == true) && (hasValidResidency == true)) {
				return true;
			}
		}

		else if ((age < 18) && (age > 25)){
			if ((isAcceptedStudent == true) && (hasSSN == true) && (hasValidResidency == true)) {
				return true;
			}
		}
		else if ((age >= 18) && (age <= 25)){
			if ((isAcceptedStudent == true) && (isSSregistered == false) && (hasSSN == true) && (hasValidResidency == true) && (age >= 18) && (age <= 25)) { 
				return false;
			}
		}
		else return true;
		return true;

	}

	/**
	 * Calculates the students expected family contribution. If the student is
	 * a dependent, then their EFC is calculated by the sum of the students 
	 * income and their parent's income, else if it just the student's income.
	 * 
	 * @return The students expected family contribution
	 */
	public double calcEFC() {
		if (isDependent == true) {
			return (studentIncome + parentIncome);
		}
		else {
			return studentIncome;
		}
	}


	/**
	 * Calculates the student's federal grant award. The student's EFC must be
	 * less than or equal to 50000 and they must be an undergraduate. The award
	 * amount is based on their class standing and credit hours. Refer to the
	 * tables in the breakdown section.
	 * 
	 * @return The student's calculated federal grant award amount
	 */
	public double calcFederalGrant() {
		FAFSA s = new FAFSA(isAcceptedStudent, isSSregistered, hasSSN,
				hasValidResidency, isDependent, age,
				creditHours, studentIncome, parentIncome,
				classStanding);
		if (classStanding == null){
			return 0.00;
		}
		else if (classStanding.equalsIgnoreCase("Undergraduate") && (s.calcEFC() <= 50000) && (creditHours < 9)) {
			return 2500.00;
		}
		else if (classStanding.equalsIgnoreCase("Undergraduate") && (s.calcEFC() <= 50000) && (creditHours >= 9)) {
			return 5775.00;
		}
		else return 0.00;

	}
	/**
	 * Calculates the student's total Stafford loan award. The Stafford loan is 
	 * only available for students registered for 9 or more credit hours. The amount 
	 * of the award is calculated by the student's dependency status and their
	 * class standing. Refer to the tables in the breakdown section.
	 * 
	 * @return The student's calculated Stafford loan award amount
	 */
	public double calcStaffordLoan() {
		if (classStanding == null){
			return 0.00;
		}
		else if (classStanding.equalsIgnoreCase("Undergraduate") && (creditHours >= 9) && (isDependent == true)) {
			return 5000.00;
		}
		else if (classStanding.equalsIgnoreCase("Graduate") && (creditHours >= 9) && (isDependent == true)) {
			return 10000.00;
		}
		else if (classStanding.equalsIgnoreCase("Undergraduate") && (creditHours >= 9) && (isDependent == false)) {
			return 10000.00;
		}
		else if (classStanding.equalsIgnoreCase("graduate") && (creditHours >= 9) && (isDependent == false)) {
			return 20000.00;
		}
		else {
			return 0.00;
		}
	}

	/**
	 * Calculates the student's work study award. The work study award is
	 * based on the student's EFC. Refer to the table in the breakdown section.
	 * 
	 * @return The student's calculated federal grant award amount
	 */
	public double calcWorkStudy() {
		FAFSA n = new FAFSA(isAcceptedStudent, isSSregistered, hasSSN,
				hasValidResidency, isDependent, age,
				creditHours, studentIncome, parentIncome,
				classStanding);
		if (n.calcEFC() <= 30000) {
			return 1500.00;
		}
		else if (n.calcEFC() <= 40000) {
			return 1000.00;
		}
		else if (n.calcEFC() <= 50000) {
			return 500.00;
		}
		else {
			return 0.00;
		}
	}
	/**
	 * Calculates the student's total combined federal aid award. The total
	 * aid award is calculated as the sum of Stafford loan award, federal grant
	 * award, and work study award. You should make a call to the method 
	 * isFederalAidEligible() to see if the student is eligible to receive 
	 * federal aid. If they are NOT eligible, you can return 0. If the are, you
	 * will return their total aid award.
	 * 
	 * @return The student's total aid award amount
	 */
	public double calcFederalAidAmount() {
		FAFSA t = new FAFSA(isAcceptedStudent, isSSregistered, hasSSN,
				hasValidResidency, isDependent, age,
				creditHours, studentIncome, parentIncome,
				classStanding);
		if (t.classStanding == null) {
			return 0.00;
		}
		else if (t.isFederalAidEligible() == true) {
			return (t.calcWorkStudy() + t.calcStaffordLoan() + t.calcFederalGrant());
		}
		else {
			return 0.00;
		}
	}
	public boolean checkAgeCompatibility() {
		if (isSSregistered == true && (age >= 18 && age <= 25)) {
			return true;
		}
		else if (isSSregistered == true && (age <= 18 && age >= 25)) {
			return false;
		}
		else return true;
	}
}




